// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(cuid())
  name                 String
  email                String               @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  role                 Role                 @default(CLIENT)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  appointmentsAsClient Appointment[]        @relation("ClientAppointments")
  appointmentsAsBarber Appointment[]        @relation("BarberAppointments")
  availability         BarberAvailability[]
  accounts             Account[]
  sessions             Session[]
  Loyalty              Loyalty?
  // Optional for WebAuthn support
  Authenticator        Authenticator[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Service {
  id           Int           @id @default(autoincrement())
  name         String
  duration     Int // minutos
  price        Float
  appointments Appointment[]
}

model Appointment {
  id          Int               @id @default(autoincrement())
  date        DateTime
  userId      String
  barberId    String
  serviceId   Int
  serviceName String?
  status      AppointmentStatus @default(SCHEDULED)
  service     Service           @relation(fields: [serviceId], references: [id])
  user        User              @relation("ClientAppointments", fields: [userId], references: [id])
  barber      User              @relation("BarberAppointments", fields: [barberId], references: [id])
}

model Loyalty {
  id     Int    @id @default(autoincrement())
  userId String @unique
  points Int    @default(0)
  user   User   @relation(fields: [userId], references: [id])
}

model BarberAvailability {
  id        Int    @id @default(autoincrement())
  barberId  String
  dayOfWeek Int // 0 = Domingo, 1 = Segunda...
  startTime String // formato HH:mm
  endTime   String
  barber    User   @relation(fields: [barberId], references: [id])
}

enum AppointmentStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Role {
  CLIENT
  BARBER
  ADMIN
}
